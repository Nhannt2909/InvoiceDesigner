@page "/BankReceipts"
@using InvoiceDesigner.Domain.Shared.DTOs.BankReceiptDTOs
@using InvoiceDesigner.Domain.Shared.Enums
@using InvoiceDesigner.Domain.Shared.Extensions
@using InvoiceDesigner.Domain.Shared.QueryParameters
@using InvoiceDesigner.Domain.Shared.Responses

<MudContainer>
	<MudTable ServerData="ServerReload" @ref="_table" Dense Hover RowsPerPage="20">
		<ToolBarContent>
			<MudText Typo="Typo.h6">@localizer[@_controller]</MudText>
			<MudSpacer />
			<MudTextField T="string"
			ValueChanged="@(s=>OnSearch(s))"
			Placeholder="@localizer["Search"]"
			Adornment="Adornment.Start"
			AdornmentIcon="@Icons.Material.Filled.Search"
			IconSize="Size.Medium"
			Class="mt-0" />
			<MudSpacer />

			<MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Medium" Style="margin-left: auto;" Dense>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showDeleted" Label="@localizer["ShowDeleted"]" onclick="@(()=>OnCheckedShowDeletedChanged())"></MudCheckBox>
				</MudMenuItem>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showArchived" Label="@localizer["ShowArchived"]" onclick="@(()=>OnCheckedShowArchivedChanged())"></MudCheckBox>
				</MudMenuItem>
			</MudMenu>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Id</MudTh>
			<MudTh>Date</MudTh>
			<MudTh>@localizer["Company"]</MudTh>
			<MudTh>@localizer["Bank"]</MudTh>
			<MudTh>@localizer["Customer"]</MudTh>
			<MudTh>@localizer["Amount"]</MudTh>
			<MudTh>@localizer["Currency"]</MudTh>
			<MudTh>@localizer["Status"]</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Id">@context.Number</MudTd>
			<MudTd DataLabel="Date">@context.DateTime?.ToString("dd.MM.yyyy")</MudTd>
			<MudTd DataLabel="Comapny">@context.CompanyName</MudTd>
			<MudTd DataLabel="Custome">@context.BankName</MudTd>
			<MudTd DataLabel="Custome">@context.CustomerName</MudTd>
			<MudTd DataLabel="Amount">@context.Amount.ToString("N2")</MudTd>
			<MudTd DataLabel="Currency">@context.CurrencyName</MudTd>
			<MudTd DataLabel="Status">@context.Status</MudTd>

			<MudTd Class="pa-0">
				<MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense>

					<MudNavLink OnClick="(() => OpenBankReceipt(context.Id))" Class="d-flex flex-nowrap">
						<MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2" />
						@localizer["Edit"] @localizer["BankReceipt"] @context.Number
					</MudNavLink>

					<MudNavLink OnClick="() => OnChangeProperty(context.Id, context.IsDeleted, true, EStatus.Canceled)" Class="d-flex flex-nowrap">
						<MudIcon Icon="@Icons.Material.Filled.Cancel" Class="me-2" />
						@localizer["CancelAndArchiveDocument"]
					</MudNavLink>

					<MudPaper Elevation="3">
						<MudNavGroup Title="Action">
							<MudNavLink OnClick="() => OnChangeProperty(context.Id, !context.IsArchived, context.IsDeleted, context.Status)" Class="d-flex flex-nowrap">
								<MudIcon Icon="@(context.IsArchived ? Icons.Material.Outlined.Unarchive : Icons.Material.Filled.Archive)" Class="me-2" />
								Archive/Unarchive
							</MudNavLink>
							<MudNavLink OnClick="() => RedirectToDeleteRow(context.Id)" Class="d-flex flex-nowrap">
								<MudIcon Icon="@(context.IsDeleted ? Icons.Material.Filled.DeleteForever : Icons.Material.Filled.Delete)" Class="me-2" />
								@localizer["Delete"]
							</MudNavLink>
						</MudNavGroup>
					</MudPaper>

				</MudMenu>
			</MudTd>
		</RowTemplate>
		<NoRecordsContent>
			<MudText>@localizer["NoMatchingRecordsFound"]</MudText>
		</NoRecordsContent>
		<LoadingContent>
			<MudText>@localizer["Loading"]</MudText>
		</LoadingContent>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[] {10, 20, 30, 40, 50}" />
		</PagerContent>
	</MudTable>

</MudContainer>

@code {
	private static string _controller = "BankReceipts";

	private MudTable<BankReceiptViewDto> _table = new();
	private ResponsePaged<BankReceiptViewDto>? _pagedResult;
	private string _searchString = "";
	private bool _showDeleted = false;
	private bool _showArchived = false;



	private async Task<TableData<BankReceiptViewDto>> ServerReload(TableState state, CancellationToken token)
	{
		var queryParameters = new QueryPaged
			{
				PageSize = state.PageSize,
				Page = state.Page + 1,
				SearchString = _searchString,
				SortLabel = "Id_desc",
				ShowDeleted = _showDeleted,
				ShowArchived = _showArchived
			};

		string queryString = queryParameters.ToQueryString();

		_pagedResult = await _httpHelper.GetDataFromAPI<ResponsePaged<BankReceiptViewDto>>($"api/BankReceipts?{queryString}");

		if (_pagedResult != null)
			return new TableData<BankReceiptViewDto>()
				{
					TotalItems = _pagedResult.TotalCount,
					Items = _pagedResult.Items
				};

		return new();
	}

	private void OnSearch(string text)
	{
		_searchString = text;
		_table.ReloadServerData();
	}

	private async void RedirectToDeleteRow(int id)
	{
		if (await _httpHelper.DeleteOrMarkAsDeletedAsync($"{_controller}/{id}"))
			await _table.ReloadServerData();
	}

	private async Task OnCheckedShowArchivedChanged()
	{
		_showArchived = !_showArchived;
		await _table.ReloadServerData();
	}

	private async Task OnCheckedShowDeletedChanged()
	{
		_showDeleted = !_showDeleted;
		await _table.ReloadServerData();
	}

	private async Task OnChangeProperty(int id, bool isDeleted, bool isArchived, EStatus status)
	{
		var queryParameters = new QueryOnChangeProperty
			{
				EntityId = id,
				IsDeleted = isDeleted,
				IsArchived = isArchived,
				Status = status
			};
		string queryString = queryParameters.ToQueryString();

		var result = await _httpHelper.GetDataFromAPI<ResponseBoolean>($"api/{_controller}/OnChangeProperty?{queryString}");
		if (result.Result)
			await _table.ReloadServerData();
	}

	private async Task OpenBankReceipt(int bankReceiptId)
	{
		var parameters = new DialogParameters<BankReceiptEdit_dialog>
		{
			{ x => x.InvoiceId, 0 },
			{ x => x.id, bankReceiptId }
		};

		var options = new DialogOptions
			{
				CloseOnEscapeKey = true,
				CloseButton = true,
				BackdropClick = false
			};
		var dialog = await DialogService.ShowAsync<BankReceiptEdit_dialog>(string.Empty, parameters, options);
		var result = await dialog.Result;
		await _table.ReloadServerData();
		StateHasChanged();
	}
}