@page "/Banks/Edit/{id:int}"
@using InvoiceDesigner.Domain.Shared.DTOs
@using InvoiceDesigner.Domain.Shared.DTOs.Bank
@using InvoiceDesigner.Domain.Shared.DTOs.Company
@using InvoiceDesigner.Domain.Shared.DTOs.Currency
@using InvoiceDesigner.Domain.Shared.Helpers
@using InvoiceDesigner.WebApp.Helpers

@inject HttpClient Http
@inject NavigationManager nav
@inject ISnackbar Snackbar

<MudContainer>
	@if (_bankEditDto == null)
	{
		<MudText Align="Align.Center">Loading...</MudText>
	}
	else
	{
		<EditForm Model="@_bankEditDto" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<MudCard>
				<MudCardContent>
					<MudGrid Spacing="2">
						<MudItem xs="4">
							<MudAutocomplete T="CompanyAutocompleteDto"
											 @bind-Value="_bankEditDto.Company"
											 Label="Select Company"
											 Required
											 Dense="true"
											 SearchFunc="@((value, token) => FilteringDataWithApi<CompanyAutocompleteDto>(value, "Companies", token))"
											 ToStringFunc="@(c => c?.Name ?? "")"
											 Class="d-flex pa-2"
											 For="(() => _bankEditDto.Company)" />
						</MudItem>
						<MudItem xs="8">
							<MudTextField @bind-Value="_bankEditDto.Name"
										  Label="Name"
										  Required
										  Class="d-flex pa-2"
										  For="(() => _bankEditDto.Name)" />
						</MudItem>

					</MudGrid>
					<MudGrid Spacing="2">
						<MudItem xs="3">
							<MudAutocomplete T="CurrencyAutocompleteDto"
											 @bind-Value="_bankEditDto.Currency"
											 Label="Select Currency"
											 Dense="true"
											 Required
											 SearchFunc="@((value, token) => FilteringDataWithApi<CurrencyAutocompleteDto>(value, "Currencies", token))"
											 ToStringFunc="@(c => c?.Name ?? "")"
											 Class="d-flex pa-2"
											 For="(() => _bankEditDto.Currency)" />
						</MudItem>
						<MudItem xs="3">
							<MudTextField @bind-Value="_bankEditDto.BIC"
										  Label="BIC"
										  Class="d-flex pa-2"
										  For="(() => _bankEditDto.BIC)" />
						</MudItem>
						<MudItem xs="3">
							<MudTextField @bind-Value="_bankEditDto.Account"
										  Label="Account"
										  Required
										  Class="d-flex pa-2"
										  For="(() => _bankEditDto.Account)" />
						</MudItem>
					</MudGrid>
					<MudGrid Spacing="2">
						<MudItem xs="12">
							<MudTextField @bind-Value="_bankEditDto.Address"
										  Label="Address"
										  Class="d-flex pa-2"
										  For="(() => _bankEditDto.Address)" />
						</MudItem>
					</MudGrid>
				</MudCardContent>
				<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">Save</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>

	}
</MudContainer>
@code {
	[Parameter]
	public int? id { get; set; }

	private static string _controller = "Banks";
	private HttpRequestHelper _httpHelper = null!;

	private BankEditDto? _bankEditDto = null;
	private List<CurrencyAutocompleteDto> _currenciesAutocomplete = new();
	private List<CompanyAutocompleteDto> _companiesAutocomplete = new();

	protected override async Task OnInitializedAsync()
	{
		_httpHelper = new HttpRequestHelper(_controller, Http, Snackbar, nav);

		InfoForNewInvoiceDto? infoForNewInvoiceDto = await _httpHelper.GetDataFromAPI<InfoForNewInvoiceDto>("api/Invoices/GetInfoForNewInvoice");
		if (infoForNewInvoiceDto == null)
		{
			Snackbar.Add("Error Init", Severity.Error);
			return;
		}

		_currenciesAutocomplete = infoForNewInvoiceDto.Currencies.ToList();
		_companiesAutocomplete = infoForNewInvoiceDto.Companies.ToList();

		_bankEditDto = await _httpHelper.GetAsync<BankEditDto>(id);
	}

	private async Task OnValidSubmit()
	{
		await _httpHelper.SendRequest(_bankEditDto, id.HasValue && id > 0);
	}

	private async Task<IEnumerable<T>> FilteringDataWithApi<T>(string value, string apiUrl, CancellationToken token) where T : IHasIdAndName
	{
		return await _httpHelper.GetDataFromAPI<IEnumerable<T>>($"api/{apiUrl}/FilteringData?f={value}");
	}

}
