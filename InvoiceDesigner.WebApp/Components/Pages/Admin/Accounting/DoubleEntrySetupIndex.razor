@page "/Admin/Accounting/DoubleEntrySetupIndex"
@using InvoiceDesigner.Domain.Shared.DTOs.AccountingDTOs
@using InvoiceDesigner.Domain.Shared.Enums
@using InvoiceDesigner.Domain.Shared.Extensions
@using InvoiceDesigner.Domain.Shared.QueryParameters
@using InvoiceDesigner.Domain.Shared.Responses

<MudContainer>
	<MudTable ServerData="ServerReload" @ref="_table" Dense Hover RowsPerPage="20">
		<ToolBarContent>
			<MudText Typo="Typo.h6">@localizer["DoubleEntrySetup"]</MudText>
			<MudSpacer />
			<MudSelect T="EAccountingDocument" Dense Required
			Value="@_selectedEAccountingDocument"
			ValueChanged="OnChangeAccountingDocuments"
			Typo="Typo.inherit"
			Label="@localizer["TypeChartOfAccount"]"
			Variant="Variant.Outlined">
				@foreach (var value in Enum.GetValues(typeof(EAccountingDocument)).Cast<EAccountingDocument>())
				{
					<MudSelectItem value="@value">@value</MudSelectItem>
				}
			</MudSelect>
			<MudSpacer />
			<MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" OnClick="(() => OnEdit(null))" />
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Debit</MudTh>
			<MudTh>Credit</MudTh>
			<MudTh>Amount</MudTh>
			<MudTh>Entry Mode</MudTh>
			<MudTh></MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Debit">@context.DebitColumnTitle</MudTd>
			<MudTd DataLabel="Credit">@context.CreditColumnTitle</MudTd>
			<MudTd DataLabel="AmountType">@context.AmountType</MudTd>
			<MudTd DataLabel="EntryMode">@context.EntryMode</MudTd>
			<MudTd Style="width:25px" Class="pa-0">
				<MudIconButton Icon="@Icons.Material.Filled.DeleteForever"
							   Size="Size.Small"
							   Color="Color.Default"
							   OnClick="() => RedirectToDeleteRow(context.Id)" />
			</MudTd>
			<MudTd Style="width:25px" Class="pa-0">
				<MudIconButton OnClick="@(() => OnEdit(context))"
				Icon="@Icons.Material.Filled.Edit"
				Size="Size.Small"
				Color="Color.Default" />
			</MudTd>
		</RowTemplate>
		<NoRecordsContent>
			<MudText>@localizer["NoMatchingRecordsFound"]</MudText>
		</NoRecordsContent>
		<LoadingContent>
			<MudText>@localizer["Loading"]</MudText>
		</LoadingContent>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[] {10, 20, 30, 40, 50}" />
		</PagerContent>
	</MudTable>
</MudContainer>

@code {

	private MudTable<DoubleEntrySetupEditDto> _table = new();
	private ResponsePaged<DoubleEntrySetupEditDto>? _pagedResult;
	private EAccountingDocument _selectedEAccountingDocument = EAccountingDocument.Invoice;

	private async Task<TableData<DoubleEntrySetupEditDto>> ServerReload(TableState state, CancellationToken token)
	{

		var queryParameters = new QueryPagedDoubleEntrySetup
			{
				PageSize = state.PageSize,
				Page = state.Page + 1,
				AccountingDocument = _selectedEAccountingDocument
			};

		string queryString = queryParameters.ToQueryString();

		_pagedResult = await _httpHelper.GetDataFromAPI<ResponsePaged<DoubleEntrySetupEditDto>>($"api/Admin/Accounting/DoubleEntrySetup?{queryString}");

		if (_pagedResult != null)
			return new TableData<DoubleEntrySetupEditDto>()
				{
					TotalItems = _pagedResult.TotalCount,
					Items = _pagedResult.Items
				};

		return new();
	}

	private async Task OnChangeAccountingDocuments(EAccountingDocument document)
	{
		_selectedEAccountingDocument = document;
		await _table.ReloadServerData();
	}

	private async Task RedirectToDeleteRow(int id)
	{
		if (await _httpHelper.DeleteWithConfirmationAsync($"Admin/Accounting/DoubleEntrySetup/{id}"))
			await _table.ReloadServerData();
	}

	private async Task OnEdit(DoubleEntrySetupEditDto? dto)
	{
		var editEntity = true;
		if (dto == null)
		{
			editEntity = false;
			dto = new DoubleEntrySetupEditDto{
					AccountingDocument = _selectedEAccountingDocument
			};
		}

		var parameters = new DialogParameters<DoubleEntrySetupEdit_dialog>
		{
			{ x => x.originalDto, dto }
		};

		var options = new DialogOptions { CloseOnEscapeKey = false };
		var dialog = await DialogService.ShowAsync<DoubleEntrySetupEdit_dialog>(dto.AccountingDocument.ToString(), parameters, options);
		var result = await dialog.Result;

		if (result != null && !result.Canceled)
		{
			var res = result.Data;
			if (res != null)
			{
				var editedDto = res as DoubleEntrySetupEditDto;
				if (editedDto != null)
				{
					dto = editedDto;
					await _httpHelper.SendRequest("Admin/Accounting/DoubleEntrySetup", dto, editEntity);
					await _table.ReloadServerData();
					StateHasChanged();
				}
				
			}

		}
	}
}
