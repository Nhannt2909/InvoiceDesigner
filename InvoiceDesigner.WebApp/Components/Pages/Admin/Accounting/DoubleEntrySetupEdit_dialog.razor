@using InvoiceDesigner.Domain.Shared.DTOs.AccountingDTOs
@using InvoiceDesigner.Domain.Shared.Enums
@using InvoiceDesigner.Domain.Shared.Helpers
@using InvoiceDesigner.Domain.Shared.Interfaces.Abstract

<MudDialog Style="width:700px; ">
	<DialogContent>
		<MudGrid Spacing="2">
			<MudItem xs="3">
				Debit:
			</MudItem>
			<MudItem xs="9">
				<MudAutocomplete T="ChartOfAccountsAutocompleteDto" Required Dense Clearable
								 @bind-Value="editedDto.DebitAccount"
								 SearchFunc="@((value, token) => FilteringDataWithApi<ChartOfAccountsAutocompleteDto>(value, token))"
								 ToStringFunc="@(c => $"{c?.Code} - {c?.Name}" ?? "")"
								 For="(() => originalDto.DebitAccount)" />
			</MudItem>
			<MudItem xs="3">
				Credit:
			</MudItem>
			<MudItem xs="9">
				<MudAutocomplete T="ChartOfAccountsAutocompleteDto" Required Dense Clearable
								 @bind-Value="editedDto.CreditAccount"
								 SearchFunc="@((value, token) => FilteringDataWithApi<ChartOfAccountsAutocompleteDto>(value, token))"
								 ToStringFunc="@(c => $"{c?.Code} - {c?.Name}" ?? "")"
								 For="(() => originalDto.CreditAccount)" />
			</MudItem>
			<MudItem xs="3">
				@localizer["Amount"]:
			</MudItem>
			<MudItem xs="9">
				<MudSelect T="EAmountType" Dense Required
						   @bind-Value="editedDto.AmountType"
						   Disabled="@(editedDto.EntryMode == EEntryMode.SplitByItem)"
						   Typo="Typo.inherit"
						   Variant="Variant.Outlined">
					@foreach (var value in Enum.GetValues(typeof(EAmountType)).Cast<EAmountType>())
					{
						<MudSelectItem value="@value">@value</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="12">
				@localizer["HelpEntryMode"]
			</MudItem>
			<MudItem xs="3">
				EntryMode:
			</MudItem>
			<MudItem xs="9">
				<MudSelect T="EEntryMode" Dense Required
						   Value="editedDto.EntryMode"
						   ValueChanged="OnChangedEntryMode"
						   Typo="Typo.inherit"
						   Variant="Variant.Outlined">
					@foreach (var value in Enum.GetValues(typeof(EEntryMode)).Cast<EEntryMode>())
					{
						<MudSelectItem value="@value">@value</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
		</MudGrid>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">@localizer["Cancel"]</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">@localizer["Save"]</MudButton>
	</DialogActions>
</MudDialog>

@code {
	[CascadingParameter]
	private MudDialogInstance MudDialog { get; set; } = null!;

	[Parameter]
	public DoubleEntrySetupEditDto originalDto { get; set; } = null!;

	public DoubleEntrySetupEditDto editedDto = new();

	protected override void OnInitialized()
	{
		base.OnInitialized();
		editedDto.Id = originalDto.Id;
		editedDto.AccountingDocument = originalDto.AccountingDocument;
		editedDto.CreditAccount = originalDto.CreditAccount;
		editedDto.DebitAccount = originalDto.DebitAccount;
		editedDto.EntryMode = originalDto.EntryMode;
		editedDto.AmountType = originalDto.AmountType;
	}

	private void Cancel() => MudDialog.Cancel();

	private void Submit()
	{
		MudDialog.Close(DialogResult.Ok(editedDto));
	}

	private async Task<IEnumerable<T>> FilteringDataWithApi<T>(string value, CancellationToken token) where T : IHasIdAndName
	{
		var allResults = await _httpHelper.GetDataFromAPI<IEnumerable<T>>($"api/Admin/Accounting/ChartOfAccounts/FilteringData?f={value}");
		var filteredResults = allResults.Cast<ChartOfAccountsAutocompleteDto>()
			.Cast<T>();

		return filteredResults;
	}

	private void OnChangedEntryMode(EEntryMode mode)
	{
		editedDto.EntryMode = mode;
		if (mode == EEntryMode.SplitByItem)
			editedDto.AmountType = EAmountType.AmountWithoutTax;
	}
}
