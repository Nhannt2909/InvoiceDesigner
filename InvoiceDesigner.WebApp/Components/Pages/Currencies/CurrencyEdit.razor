@page "/Currencies/Edit/{id:int}"
@using InvoiceDesigner.Domain.Shared.DTOs.Currency
@using InvoiceDesigner.WebApp.Helpers
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService LocalStorageService
@inject NavigationManager nav
@inject ISnackbar Snackbar

@if (_currencyEditDto == null)
{
	<MudText Align="Align.Center">Loading...</MudText>
}
else
{
	<MudContainer>
		<EditForm Model="@_currencyEditDto" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<MudCard>
				<MudCardContent>
					<MudTextField @bind-Value="_currencyEditDto.Name"
								  Label="Currency Code"
								  For="(() => _currencyEditDto.Name)" />
					<MudTextField @bind-Value="_currencyEditDto.Description"
								  Label="Description"
								  For="(() => _currencyEditDto.Description)" />
				</MudCardContent>
				<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">Save</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	</MudContainer>
}

@code {
	[Parameter]
	public int? id { get; set; }

	private static string _controller = "Currencies";
	private HttpRequestHelper _httpHelper = null!;

	private CurrencyEditDto? _currencyEditDto;

	protected override async Task OnInitializedAsync()
	{
		_httpHelper = new HttpRequestHelper(_controller, HttpClientFactory, Snackbar, LocalStorageService, nav);

		_currencyEditDto = await _httpHelper.GetAsync<CurrencyEditDto>(id);
	}

	private async Task OnValidSubmit()
	{
		await _httpHelper.SendRequest(_currencyEditDto, id.HasValue && id > 0);
	}


}
