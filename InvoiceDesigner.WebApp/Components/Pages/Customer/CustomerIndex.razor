@page "/Customers"
@using InvoiceDesigner.Domain.Shared.DTOs.Customer
@using InvoiceDesigner.Domain.Shared.Responses
@using InvoiceDesigner.WebApp.Helpers
@inject IHttpClientFactory HttpClientFactory
@inject ILocalStorageService LocalStorageService
@inject NavigationManager nav
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer>
	<MudTable ServerData="ServerReload" @ref="_table" Dense="true" Hover="true" RowsPerPage="20">
		<ToolBarContent>
			<MudText Typo="Typo.h6">@_controller</MudText>
			<MudSpacer />
			<MudTextField T="string"
						  ValueChanged="@(s=>OnSearch(s))"
						  Placeholder="Search"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  IconSize="Size.Medium"
						  Class="mt-0" />
			<MudSpacer />
			<MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" Href="/Customers/0" />
			<MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Medium" Style="margin-left: auto;" Dense>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showDeleted" Label="Show Deleted" onclick="@(()=>OnCheckedChanged())"></MudCheckBox>
				</MudMenuItem>
			</MudMenu>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>
				<MudTableSortLabel T="CustomerViewDto" SortLabel="Id" InitialDirection="SortDirection.Ascending">
					Id
				</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel T="CustomerViewDto" SortLabel="Name">
					Name
				</MudTableSortLabel>
			</MudTh>
			<MudTh>TaxId</MudTh>
			<MudTh></MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>

			<MudTd DataLabel="Id">@context.Id</MudTd>
			<MudTd DataLabel="Name">@context.Name</MudTd>
			<MudTd DataLabel="TaxId">@context.TaxId</MudTd>
			<MudTd Class="text-right" Style="width:25px">
				<MudIconButton Href="@($"/Customers/{context.Id}")"
							   Icon="@Icons.Material.Filled.Edit"
							   Size="Size.Small"
							   Color="Color.Default" />
			</MudTd>
			<MudTd Class="text-right" Style="width:25px">
				<MudIconButton Icon="@(context.IsDeleted ? Icons.Material.Filled.DeleteForever : Icons.Material.Filled.Delete)"
							   Color="Color.Default"
							   Size="Size.Small"
							   OnClick="() => RedirectToDeleteRow(context.Id)" />
			</MudTd>

		</RowTemplate>

		<NoRecordsContent>
			<MudText>No matching records found</MudText>
		</NoRecordsContent>
		<LoadingContent>
			<MudText>Loading...</MudText>
		</LoadingContent>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[] {10, 20, 30, 40, 50}" />
		</PagerContent>
	</MudTable>
</MudContainer>

@code {
	private static string _controller = "Customers";
	private HttpRequestHelper _httpHelper = null!;

	private MudTable<CustomerViewDto> _table = new();
	private ResponsePaged<CustomerViewDto>? _pagedResult;
	private string _searchString = "";
	private bool _showDeleted = false;

	protected override async Task OnInitializedAsync()
	{
		_httpHelper = new HttpRequestHelper(_controller, HttpClientFactory, Snackbar, LocalStorageService, nav, DialogService);
		await Task.Delay(1);
	}

	private async Task<TableData<CustomerViewDto>> ServerReload(TableState state, CancellationToken token)
	{
		string order = $"{state.SortLabel}{(state.SortDirection == SortDirection.Descending ? "_desc" : "")}";

		_pagedResult = await _httpHelper.GetDataFromAPI<ResponsePaged<CustomerViewDto>>($"api/Customers?pageSize={state.PageSize}&page={state.Page + 1}&searchString={_searchString}&sortLabel={order}&showDeleted={_showDeleted}");

		if (_pagedResult != null)
			return new TableData<CustomerViewDto>()
				{
					TotalItems = _pagedResult.TotalCount,
					Items = _pagedResult.Items
				};

		return new();
	}

	private void OnSearch(string text)
	{
		_searchString = text;
		_table.ReloadServerData();
	}

	private async void RedirectToDeleteRow(int id)
	{
		if (await _httpHelper.DeleteOrMarkAdDeletedAsync(id))
			await _table.ReloadServerData();
	}

	private async Task OnCheckedChanged()
	{
		_showDeleted = !_showDeleted;
		await _table.ReloadServerData();
	}
}