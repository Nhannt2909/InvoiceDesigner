@page "/Invoices"
@using InvoiceDesigner.Domain.Shared.DTOs.Invoice
@using InvoiceDesigner.Domain.Shared.Enums
@using InvoiceDesigner.Domain.Shared.Extensions
@using InvoiceDesigner.Domain.Shared.QueryParameters
@using InvoiceDesigner.Domain.Shared.Responses
@using InvoiceDesigner.WebApp.Components.Pages.Helpers

<MudContainer>
	<MudTable ServerData="ServerReload" @ref="_table" Dense Hover RowsPerPage="20">
		<ToolBarContent>
			<MudText Typo="Typo.h6">@localizer[@_controller]</MudText>
			<MudSpacer />
			<MudTextField T="string"
						  ValueChanged="@(s=>OnSearch(s))"
						  Placeholder="@localizer["Search"]"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  IconSize="Size.Medium"
						  Class="mt-0" />
			<MudSpacer />
			<MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" Href="/Invoices/0" />
			<MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Medium" Style="margin-left: auto;" Dense>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showDeleted" Label="@localizer["ShowDeleted"]" onclick="@(()=>OnCheckedShowDeletedChanged())"></MudCheckBox>
				</MudMenuItem>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showArchived" Label="@localizer["ShowArchived"]" onclick="@(()=>OnCheckedShowArchivedChanged())"></MudCheckBox>
				</MudMenuItem>
			</MudMenu>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Id</MudTh>
			<MudTh>Date</MudTh>
			<MudTh>@localizer["Company"]</MudTh>
			<MudTh>@localizer["Customer"]</MudTh>
			<MudTh>@localizer["Amount"]</MudTh>
			<MudTh>@localizer["Currency"]</MudTh>
			<MudTh>@localizer["Status"]</MudTh>
			<MudTh></MudTh>
			<MudTh></MudTh>
			<MudTh></MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Id">@context.InvoiceNumber</MudTd>
			<MudTd DataLabel="Date">@context.DateTime.ToString("dd.MM.yyyy")</MudTd>
			<MudTd DataLabel="Comapny">@context.CompanyName</MudTd>
			<MudTd DataLabel="Custome">@context.CustomerName</MudTd>
			<MudTd DataLabel="Amount">@context.TotalAmount.ToString("N2")</MudTd>
			<MudTd DataLabel="Currency">@context.CurrencyName</MudTd>
			<MudTd DataLabel="Status">
				<MudSelect T="EInvoiceStatus"
						   Value="@context.Status"
						   ValueChanged="@(val => OnChangedInvoiceStatus(context, val))"
						   Style="width: 50px;">
					<MudSelectItem T="EInvoiceStatus" Value="EInvoiceStatus.Active">
						<MudChip Class="ma-0" T="EInvoiceStatus" Style="height: 25px;" Color="Color.Primary">
							@EInvoiceStatus.Active
						</MudChip>
					</MudSelectItem>
					<MudSelectItem T="EInvoiceStatus" Value="EInvoiceStatus.Paid">
						<MudChip Class="ma-0" T="EInvoiceStatus" Style="height: 25px;" Color="Color.Success">
							@EInvoiceStatus.Paid
						</MudChip>

					</MudSelectItem>
					<MudSelectItem T="EInvoiceStatus" Value="EInvoiceStatus.Canceled">
						<MudChip Class="ma-0" T="EInvoiceStatus" Style="height: 25px;" Color="Color.Warning">
							@EInvoiceStatus.Canceled
						</MudChip>

					</MudSelectItem>
				</MudSelect>

			</MudTd>
			<MudTd Style="width:25px" Class="pa-0">
				<MudIconButton Href="@($"/Invoices/{context.Id}")"
							   Icon="@Icons.Material.Filled.Edit"
							   Size="Size.Small"
							   Color="Color.Default" />
			</MudTd>
			<MudTd Style="width:25px" Class="pa-0">
				<ActivityLogsHelper DocumentType=EDocumentsTypes.Invoice
									EntityId="@context.Id" />
			</MudTd>
			<MudTd Style="width:25px" Class="pa-0">
				<MudIconButton Icon="@(context.IsDeleted ? Icons.Material.Filled.DeleteForever : Icons.Material.Filled.Delete)"
							   Color="Color.Default"
							   Size="Size.Small"
							   OnClick="() => RedirectToDeleteRow(context.Id)" />
			</MudTd>
			<MudTd Style="width:25px" Class="pa-0">
				<MudIconButton Icon="@(context.IsArchived ? Icons.Material.Outlined.Unarchive : Icons.Material.Filled.Archive)"
							   Color="Color.Default"
							   Size="Size.Small"
							   OnClick="() => ArchiveUnarchiveEntity(context.Id, !context.IsArchived)" />
			</MudTd>
		</RowTemplate>
		<NoRecordsContent>
			<MudText>@localizer["NoMatchingRecordsFound"]</MudText>
		</NoRecordsContent>
		<LoadingContent>
			<MudText>@localizer["Loading"]</MudText>
		</LoadingContent>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[] {10, 20, 30, 40, 50}" />
		</PagerContent>
	</MudTable>

</MudContainer>

@code {
	private static string _controller = "Invoices";

	private MudTable<InvoicesViewDto> _table = new();
	private ResponsePaged<InvoicesViewDto>? _pagedResult;
	private string _searchString = "";
	private bool _showDeleted = false;
	private bool _showArchived = false;



	private async Task<TableData<InvoicesViewDto>> ServerReload(TableState state, CancellationToken token)
	{
		var queryParameters = new QueryPaged
			{
				PageSize = state.PageSize,
				Page = state.Page + 1,
				SearchString = _searchString,
				SortLabel = "Id_desc",
				ShowDeleted = _showDeleted,
				ShowArchived = _showArchived
			};

		string queryString = queryParameters.ToQueryString();

		_pagedResult = await _httpHelper.GetDataFromAPI<ResponsePaged<InvoicesViewDto>>($"api/Invoices?{queryString}");

		if (_pagedResult != null)
			return new TableData<InvoicesViewDto>()
				{
					TotalItems = _pagedResult.TotalCount,
					Items = _pagedResult.Items
				};

		return new();
	}

	private void OnSearch(string text)
	{
		_searchString = text;
		_table.ReloadServerData();
	}

	private async void RedirectToDeleteRow(int id)
	{
		if (await _httpHelper.DeleteOrMarkAsDeletedAsync($"Invoices/{id}"))
			await _table.ReloadServerData();
	}

	private async Task OnCheckedShowArchivedChanged()
	{
		_showArchived = !_showArchived;
		await _table.ReloadServerData();
	}

	private async Task OnCheckedShowDeletedChanged()
	{
		_showDeleted = !_showDeleted;
		await _table.ReloadServerData();
	}

	private async Task ArchiveUnarchiveEntity(int id, bool archive)
	{
		var queryParameters = new QueryInvoiceChangeArchive
			{
				InvoiceId = id,
				Archive = archive
			};

		string queryString = queryParameters.ToQueryString();

		var result = await _httpHelper.GetDataFromAPI<ResponseBoolean>($"api/Invoices/ArchiveUnarchive?{queryString}");
		if (result.Result)
			await _table.ReloadServerData();
	}

	private async Task OnChangedInvoiceStatus(InvoicesViewDto entity, EInvoiceStatus newStatus)
	{
		var queryParameters = new QueryInvoiceChangeStatus
			{
				EntityId = entity.Id,
				Status = newStatus
			};

		string queryString = queryParameters.ToQueryString();

		var result = await _httpHelper.GetDataFromAPI<ResponseBoolean>($"api/Invoices/ChangeInvoiceStatus?{queryString}");

		if (result.Result)
		{
			entity.Status = newStatus;
			Snackbar.Add("Status updated!", Severity.Success);
		}
	}
}